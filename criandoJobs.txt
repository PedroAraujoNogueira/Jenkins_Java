1. Para criar nosso Job vamos precisar instalar alguns plugins no Jenkins, para estender as 
funcioalidades dele. Para isso vá ein:
1.1. Gerenciar Jenkins -> Gerenciar plugins -> Disponíveis
1.2. Escreva Github no filtro de busca.
1.3 Procure pelo plugin chamado GitHub Authentication. Esse plugin dá ao Jenkins permissões 
no github.
1.4. Clique em instalar sem reiniciar(install without restart).
1.5. Após terminar de instalar o plugin volte para a página principal.

2. Para criar um novo Job siga os passos:
2.1. Clique em novo job.
2.2. Dê um nome para seu job.
2.3. Escolha uma das opções de job e clique em OK, no nosso caso vamos escolher 
"Construir um projeto de software free-style" 
2.4. Na página seguinte vá em "gerenciamento de código fonte" e escolha a opção Git.
2.5. Cole em Repository URL a URL do seu repositório(do repositório que vc deseja 
dar permissão para o Jenkins).
OBS: as credenciais só serão necessárias se o seu repositório for um repositório privado.
OBS2: Em Branch Specifier coloque a branch na qual o jenkins vai procurar na hora de construir 
o software.
2.6. Vá no topico Build -> Adicionar passo no build -> Executar shell, e coloque o comando: 
javac math.java
Após isso clique em Salvar.
2.7. clique em "construir agora" e veja o build acontecendo na parte "histórico de builds".
2.8. Ao clicar em uma build podemos ver todas as informações daquela build.
2.9. Em saída do console podemos ver onde todos os arquivos, usados e gerados no build, são 
gravados, veja o caminho do arquivo na linha de Building in workspace. 

3. Trabalhando com variáveis de ambiente no Jenkins.
3.1. Vá nas configurações do seu projeto e procure pela "lista de variaveis de ambiente 
disponíveis", no tópico build. Lá vamos ver as variaveis de ambientes disponíveis.
3.2. Por exemplo, no comando abaixo as informações que começam com $ são variáveis de ambiente. 
echo Executando a job $JOB_NAME e a build de número $BUILD_NUMBER que está salva no Workspace $WORKSPACE.
3.3 Após fazer alguma alteração clique em "Aplicar" e depois em "Salvar".

4. Plugin do Jenkins para modificar o nome que aparece nas builds: 
4.1. Instalar o plugin "Build Name and Description Setter".
4.2. Após isso vá nas configurações do seu projeto no tópico de "Ambiente de Build" e 
agora vai ter a opção "Set Build Name".
4.3. Coloque o nome da build que preferir, por exemplo: ${JOB_NAME}_${BUILD_NUMBER}, e depois
clique em Aplicar e Salvar.
4.4 Construa um novo Build e veja a mudança no nome da Build.

5. Plugin do Jenkins para saber quem está executando a Job, pois normalmente a pessoa que fez o 
commit é diferente da pessoa que fez a build.
5.1. Instalar o plugin "build user vars".
5.2. Após isso vá nas configurações do seu projeto no tópico de "Ambiente de Build" e 
agora vai ter a opção "Set Jenkins user build variables".
4.3. Coloque uma das variaveis de ambiente que esse plugin adicionou, por exemplo ${BUILD_USER},
juntando com o que já tinhamos antes ficamos com ${JOB_NAME}_${BUILD_NUMBER}_${BUILD_USER}.
Após isso clique em Aplicar e Salvar.
4.4 Construa um novo Build e veja a mudança no nome da Build.

6. Habilitar o envio de emails, para que os líder técnicos, por exemplo, possam saber 
quais Builds deram sucessos ou não.
6.1. Gerenciar Jenkins -> Configurar o sistema -> Vá ao tópico Notificação de E-mail
6.2. No campo "Servidor SMTP" coloque o serviço SMTP que seu gmail usa, no geral é: 
smtp.gmail.com
6.3. No campo "Sufixo padrão para e-mail de usuário" coloque: 
@gmail.com ou a extensão do seu gmail.
6.4. Clique em Avançado e em "Use SMTP Authentication" em seguida coloque o usuário e senha.
6.5. Clique em "Usar SSL" e em Porta SMTP será a 465. 
6.6. Clique em "Configuração de teste para enviar e-mail" e coloque seu email que irá 
receber a mensagem de teste em "Test e-mail recipient", após isso clique em "Test configuration".
6.7. Agora vá nas configurações do seu projeto(job) -> Ações de pós-build 
-> Adicionar ação de pós-build -> Notificação de E-mail
6.8. Coloque seu email no campo Destinatários e clique em aplicar e salvar.
6.9. Toda vez que algum Build der algum erro ou estiver instável, você receberá um email.

7. Configurando builds automáticas, para isso vamos configurar o nosso projeto e o github para
que toda vez que fizermos um merge na nossa branch main então seja feito um build 
automáticamente no Jenkins.
7.1. Para isso vai nas configurações do projeto Jenkins -> Trigger de 
Builds -> GitHub hook trigger for GITScm polling
DIFICULDADES DESSE TÓPICO:
1. O github não utiliza mais services nas suas configurações, ao invés disso foi trocado pelos
webhooks, então segui esse tutorial ao invés de seguir o tutorial do curso
https://www.blazemeter.com/blog/how-to-integrate-your-github-repository-to-your-jenkins-project
2. Colocar um IP publico na configuração do webhook.
2.1. Para saber o IP público podemos usar esse link, https://whatismyipaddress.com/
2.2. Redirecionar a porta do roteador para meu computador.